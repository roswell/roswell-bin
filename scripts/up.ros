#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ql:quickload '(:cl-ppcre :split-sequence :sn.github))
  )

(defpackage :ros.script.up.3676381940
  (:use :cl :sn.github.repos.releases))

(in-package :ros.script.up.3676381940)

(defun release-exist-p (tagname &key owner repo)
  (ignore-errors
    (find tagname
          (releases-list owner repo)
          :key (lambda (x) (getf x :|tag_name|))
          :test 'equal)))

(defun ensure-release-exists (tagname &key owner repo)
  (let ((found (release-exist-p tagname :owner owner :repo repo)))
    (if found
        found
        (releases-create owner repo tagname))))

(defun asset-upload (path tagname &key owner repo force)
  (let ((release-id (getf (release-exist-p tagname :owner owner :repo repo) :|id|))
        (name (file-namestring path)))
    (when force
      (let ((id (getf (find name (releases-assets-list owner repo release-id)
                            :key (lambda (x) (getf x :|name|))
                            :test #'equal) :|id|)))
        (when id 
          (releases-asset-delete owner repo id))))
     
    (releases-asset-upload
     owner repo
     release-id path)))

(defun github (path tagname owner repo &optional force)
  (unless (uiop:getenv "GITHUB_OAUTH_TOKEN")
    (error "GITHUB_OAUTH_TOKEN must be set"))
  (ensure-release-exists tagname :owner owner :repo repo)
  (asset-upload (pathname path) tagname :owner owner :repo repo :force (when force t)))

(defun main (subcmd &rest argv)
  (declare (ignorable argv))
  (let ((subcmd (find subcmd '(github)
                      :test 'equal :key 'string-downcase)))
    (when subcmd
      (apply subcmd argv))))
;;; vim: set ft=lisp lisp:
